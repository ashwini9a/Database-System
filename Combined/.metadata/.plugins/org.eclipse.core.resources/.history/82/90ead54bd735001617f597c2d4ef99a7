package Screens;


import java.awt.GridLayout;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.HashMap;

import javax.swing.JLabel;
import javax.swing.JTextField;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;


public class OperationFunctions {
	static String[] colnmI;
	static String validateMsg;

	public static void insertInTable(String tnm, JSONObject json) {

		JSONParser parser = new JSONParser();
		try {

			Object obj = parser.parse(new FileReader("Data/Records/" + tnm + ".json"));
			JSONObject json1 = (JSONObject) obj;
			System.out.println(json1.toJSONString());

			try {
				JSONArray headers = (JSONArray) json1.get("Records");
				headers.add(json);
				json1.put("Records", headers);
			} catch (ClassCastException e) {
				JSONArray JA = new JSONArray();
				JA.add(json);
				json1.put("Records", JA);
			}
			
			
			System.out.println(json1.toJSONString());

			File file = new File("Data/Records/" + tnm + ".json");
			FileWriter fw = null;
			BufferedWriter bw = null;
			fw = new FileWriter(file.getAbsoluteFile());
			bw = new BufferedWriter(fw);

			bw.write(json1.toJSONString());
			bw.flush();
			bw.close();

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	
	public static void updateInTable(String tnm, JSONObject json,String key,String value) {
		JSONParser parser = new JSONParser();
		try {

			Object obj = parser.parse(new FileReader("Data/Records/" + tnm + ".json"));
			JSONObject json1 = (JSONObject) obj;
			System.out.println(json1.toJSONString());
			
			try {
				JSONArray headers = (JSONArray) json1.get("Records");
				int rindex=-1;
				int size = headers.size();
				for(int i=0;i<size;i++)
				{
					JSONObject temp = (JSONObject) headers.get(i);
					if(temp.get(key).equals(value))
					{
						rindex = i;
						break;
					}
				}
				headers.remove(rindex);
				headers.add(rindex, json);
				json1.put("Records", headers);
			} catch (ClassCastException e) {
				JSONArray JA = new JSONArray();
				JA.add(json);
				json1.put("Records", JA);
			}
			
			
			System.out.println(json1.toJSONString());

			File file = new File("Data/Records/" + tnm + ".json");
			FileWriter fw = null;
			BufferedWriter bw = null;
			fw = new FileWriter(file.getAbsoluteFile());
			bw = new BufferedWriter(fw);

			bw.write(json1.toJSONString());
			bw.flush();
			bw.close();

		} catch (Exception e) {
			e.printStackTrace();
		}


	}
	
	
	public static boolean validateJSON(String tnm, JSONObject json, boolean flag) {
		if(flag)
		{
			HashMap ColTypes =new HashMap<>();
			String key = GlobalData.tablePrimaryKeyMap.get(tnm);
			String[] col;
			JSONParser parser = new JSONParser();
			try {
				
				Object obj = parser.parse(new FileReader("Data/Metadata/"+tnm+".json"));
				JSONObject json1 = (JSONObject) obj;			
				JSONArray headers = (JSONArray) json1.get("headers");			
				
				for (int i = 0; i < headers.size(); i++){
					
					Object temp = parser.parse(headers.get(i).toString());
					JSONObject temp1 = (JSONObject) temp;
					String col= (String) temp1.get("Column Name");
					String type = (String) temp1.get("Data Type");
					ColTypes.put(col, type);
					//System.out.println((String) temp1.get("Column Name"));
					
				}			
			}catch (Exception e) {	
				e.printStackTrace();
			}
			int size =ColTypes.size();
			for(int i=0;i<size;i++)
			{
				if(ColTypes.get)
			}
		
			return true;
		}
		else
		{
			String key = GlobalData.tablePrimaryKeyMap.get(tnm);
			return true;
		}
		

	}


	public static void searchInTable(String tnm, JSONObject json) {

	}
}
