package Screens;

import java.util.ArrayList;
import java.util.Iterator;

import javax.swing.JOptionPane;

public class QValidation {
	static boolean cond_flag;
	public static void validateQ1(String query)
	{
		String[] words = query.split(" ");
		int i=0;
		while(true)
		{
			System.out.println(words[i].toLowerCase().toString());
			i++;
			if(i == words.length)
			{
				break;
			}
		}
		String type= words[0].toLowerCase();
		switch(type)
		{
		case "select":
			selectValidation(words);
			break;
		case "update":
			updateValidation(words);
			break;
		case "insert":
			insertValidation(words);
			break;
		case "create":
			createValidation(words);
			break;
		case "delete":
			deleteValidation(words);
			break;
		default:
			JOptionPane.showMessageDialog(null, "Invalid database operation", "Error", JOptionPane.ERROR_MESSAGE);
		}
			
	}
	public static void selectValidation(String[] words)
	{
		cond_flag = false;
		ArrayList<String> projection = new ArrayList<>();
		ArrayList<String> tables = new ArrayList<>();
		ArrayList<String> conditions = new ArrayList<>();
		int i=1;
		while( i< words.length && !(words[i].equals("from")))
		{
			projection.add(words[i]);
			i++;
		}
		if(i==words.length)
		{
			JOptionPane.showMessageDialog(null, "Please Specify from clause", "Error", JOptionPane.ERROR_MESSAGE);
			return;
		}
		i++;
		while(i< words.length && !(words[i].equals("where")))
		{
			tables.add(words[i]);
			i++;
		}
		if(i!= words.length)
		{
			cond_flag =true;
			i++;
			while(i!= words.length)
			{
				conditions.add(words[i]);
				i++;
			}
			
		}
		if(cond_flag)
		{
			System.out.println(projection.toString());
			projectionValid(projection,tables,conditions);
			System.out.println(projection.toString());
		}
		else
		{
			
			projectionValid(projection,tables);
			
			
		}
		
		
	}
	public static void projectionValid(ArrayList<String> projection,ArrayList<String> tables,ArrayList<String> conditions)
	{
		if(projection.size()==1 && projection.get(0).equals("*"))
		{
			return;
		}
		if(projection.contains(","))
		{
			int index = projection.indexOf(",");
			projection.remove(index);
		}
		Iterator itr =projection.iterator();
		String tempProj="";
		while(itr.hasNext())
		{
			tempProj+=itr.next();
		}
		if(tempProj.charAt(0)==',' || tempProj.charAt(tempProj.length()-1)==',')
		{
			JOptionPane.showMessageDialog(null, "Invalid location of \",\"", "Error", JOptionPane.ERROR_MESSAGE);
			return;
		}
		String[] proj = tempProj.split(",");
		int j=0;
		projection=new ArrayList<>();
		while(j<proj.length)
		{
			projection.add(proj[j]);
			j++;
		}
		
 	}
	public static void projectionValid(ArrayList<String> projection,ArrayList<String> tables)
	{
	}
	public static void updateValidation(String[] words)
	{
		
	}
	public static void insertValidation(String[] words)
	{
		
	}
	public static void createValidation(String[] words)
	{
		
	}
	public static void deleteValidation(String[] words)
	{
		
	}
}
